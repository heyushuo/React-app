1.state 加上 数据
2.jsx 模板
3. 数据 + 模板 结合,生成真实的DOm .来显示
4.state发生变化
5.数据 + 模板 结合 ,生成真实的DOm 来替换原始的dom

缺陷:
第一次生成了一个完整的dom片段,
第二生成了一个完整的dom片段,
特别消耗性能

1.state 加上 数据
2.jsx 模板
3. 数据 + 模板 结合,生成真实的DOm .来显示
4.state发生变化
5.数据 + 模板 结合 ,生成真实的DOm 不直接替换原始的Dom
6.新的dom 和 原始的Dom做对比,找差异(这边损耗了性能)
7.找出input框发生的变化
8.只用新的dom中的input元素 替换掉老的Dom中的input元素

缺陷:
性能的体提升不明显

1.state 加上 数据
2.jsx 模板'


React.createElement() 这个方法吧div转换成js对象(也就是虚拟DOM)

4. 数据 + 模板 结合, 生成虚拟DOM (虚拟DOM就是一个js对象,用来描述真实的DOM)
<div id="abc" > <span>heyushuo</span> </div>
["div",{"id":"abc"},["span",{},"heyushuo"]]

3.虚拟DOM 生成真实的DOm .来显示


5.state发生变化
6.数据 + 模板  生成 新的 虚拟DOM (虚拟DOM就是一个js对象,用来描述真实的DOM)
<div id="abc" > <span>abc</span> </div>
["div",{"id":"abc"},["span",{},"abc"]] 

7.比较原始虚拟DOM和新的虚拟DOm的区别,找到区别
8.直接操作dom,修改dom

 

//js创建一个真实的DOM消耗的性能要比(需要调底层的一些东西) 创建一个js对象要消耗性能


虚拟DOM 是的这些框架可以直接写 原生应用,因为可以把虚拟DOM生成  原生的组件--------
                                                          真实的DOM只能在浏览器里识别,在原生不识别的
虚拟DOM比对diff算法

diff算法大大提升了比对性能
 setstate 是异步操作
 1.为什么搞成异步呢?
 如果连续三次setState设置.react会把这个三个合并为一个,只进行一个diff比对
  2.diff算法
  同层比较,如果不同就不在比对,其他的重新渲染

  key值最好不要使用index,数组变化了,会导致旧的数据的key和新的数据key值不一样

  a--0 b--1 c--2
  删除一个后
  b--0 c--1

  前后无法一一对应,建立关联



  ///////////////////////////////////////////
  React生命周期